#!/usr/bin/env node

/*========================================

  CONDUCT

  * Conduct Is The BrainPI CLI Tool
  * 
  * Conduct Allows Us To Create New Files
  * Quickly, Build/Run Migrations, Run 
  * Different Cron Jobs
  * 
  * FILE SHOULD NOT BE ALTERED IN ANY WAY
  * 
  * RESULTS CAN BE UNEXPECTED IF CHANGED
=========================================*/

var command,
    param_1,
    param_2;
process.argv.forEach((val, index) => {
  if (index == 2) {
    command = val;
  }
  if (index == 3) {
    param_1 = val;
  }
  if(index == 4) {
    param_2 = val;
  }
});

/*==========================================
  Sets Directory Path In Our configure.json
===========================================*/

if(command != "quick:configure" && command != "key:generate") {


  const { Migrate, ModelComponent, ControllerComponent, MiddlewareComponent,
    MigrationComponent, CronJobComponent, JobLoader, Structure } = require("brainpi");

    switch(command)
    {
      case "migrate":
          Migrate.migrate();
          break;
      case "create:controller":
          if(param_1 != null) {
            return ControllerComponent(param_1);
          } else {
            console.log("ERROR: Missing Parameter For Controller Name!");
            console.log("Closing Conduct...");
            process.exit();
          }
      case "create:job":
          if(param_1 != null) {
            return CronJobComponent(param_1);
          } else {
            console.log("ERROR: Missing Parameter For Job Name!");
            console.log("Closing Conduct...");
            process.exit();
          }
      case "create:model":
          if(param_1 != null) {
            if(param_2 != null) {
              return ModelComponent(param_1, param_2);
            }
            else
              return ModelComponent(param_1, '""');
          } else {
            console.log("ERROR: Missing Parameter For Model Name!");
            console.log("Closing Conduct...");
            process.exit();
          }
      case "create:middleware":
          if(param_1 != null) {
            return MiddlewareComponent(param_1);
          } else {
            console.log("ERROR: Missing Parameter For Middleware Name!");
            console.log("Closing Conduct...");
            process.exit();
          }
      case "make:migration":
          if(param_1 != null) {
            if(param_2 != null) {
              return MigrationComponent(param_1, param_2);
            }
            else
              return MigrationComponent(param_1, '""');
          } else {
            console.log("ERROR: Missing Parameter For Migration Name!");
            console.log("Closing Conduct...");
            process.exit();
          }
      case "cron:start": {
        if(param_1 != null) {
          if(param_1.toLowerCase() == "all") {
            return JobLoader.loadAll();
          } else {
            return JobLoader.loadSingle( param_1 );
          }
          
        } else {
          console.log("ERROR: Missing Job Name Paramerter!");
          console.log("Closing Conduct...");
          process.exit();
        }
      }
      case "link": {
        if(param_1 == null || param_2 == null) {
          console.log("ERROR: Missing Required Parameter(s)!");
          console.log("Closing Conduct...");
          process.exit();
        }

        return Structure.link(param_1, param_2);

      }
      case "filesystem:public": {
        if(param_1 == null) {
          param_1 = "storage/public";
        }

        if(param_2 == null) {
          param_2 = "public/files"
        }

        return Structure.link(param_1, param_2);

      }
      default:
          console.log("Unknown Parameter: "+x);
          process.exit();
  }




} else {

  /*==========================================
    Sets Directory Path In Our configure.json
  ===========================================*/

  const fs           = require("fs"),
        {Encryption} = require("brainpi");

  if(!fs.existsSync("configure.json") && fs.existsSync("configure.json.example")) {
    fs.rename('configure.json.example', 'configure.json', function(err) {
      if ( err ) {
        console.log('ERROR: ' + err);
        console.log("Closing Conduct...");
        process.exit();
      }
    });
  } else if (!fs.existsSync("configure.json") && !fs.existsSync("configure.json.example")) {
    console.log("ERROR: no 'configure.json' or 'configure.json.example' file found!  Please re-clone your project.")
    console.log("Closing Conduct...");
    process.exit();
  }

  fs.readFile("configure.json", 'utf8', function readFileCallback(err, data){
      if (err){
          console.log(`ERROR: ${err}`);
          console.log("Closing Conduct...");
          process.exit();
      } else {
          var obj = JSON.parse(data); //now it's an object

          obj.app.dir = __dirname;
          obj.app.key = Encryption.random();

          var json = JSON.stringify(obj, null, 2); //convert it back to json
          fs.writeFile("configure.json", json, 'utf8', function(err) {
              if(err) {
                  throw err;
              }
          }); // write it back 
  }});

}
